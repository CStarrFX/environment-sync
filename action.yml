# action.yml
name: 'Environment Sync'
description: 'Sync one environment with another. Copy a production environment into a non-production one, including its git history, files, and database'
inputs:
  source:
    description: 'The environment you want to copy to the non-production one'
    required: true
    default: 'main'
  destination:
    description: 'The environment you want to copy the production one to'
    required: true
    default: 'staging'
  source_repo_private_key:
    description: 'The private key of the source repo'
    required: true
  source_target_host:
    description: 'The host of the source environment'
    required: true
  source_target_repo:
    description: 'The repo of the source environment'
    required: true
  source_target_user:
    description: 'The user of the source environment'
    required: true
  source_database_user:
    description: 'The database user of the source environment'
    required: true
  source_database_password:
    description: 'The database password of the source environment'
    required: true
  source_database_name:
    description: 'The database name of the source environment'
    required: true
  destination_repo_private_key:
    description: 'The private key of the destination repo'
    required: true
  destination_target_host:
    description: 'The host of the destination environment'
    required: true
  destination_target_repo:
    description: 'The repo of the destination environment'
    required: true
  destination_target_user:
    description: 'The user of the destination environment'
    required: true
  destination_database_user:
    description: 'The database user of the destination environment'
    required: true
  destination_database_password:
    description: 'The database password of the destination environment'
    required: true
  destination_database_name:
    description: 'The database name of the destination environment'
    required: true
  file_owner:
    description: 'The owner of the files'
    required: true
    default: 'www-data'
  file_group:
    description: 'The group of the files'
    required: true
    default: 'www-data'
  file_permissions:
    description: 'The permissions of the files'
    required: true
    default: '644'
  dir_permissions:
    description: 'The permissions of the directories'
    required: true
    default: '755'
outputs:
  status: # id of output
    description: 'The status of the environment sync action'
runs:
  using: "composite"
  steps:
  - name: Output inputs
    run: |
      echo 'Syncing ${{ inputs.source }} to ${{ inputs.destination }}'
      echo 'Source target host: ${{ inputs.source_target_host }}'
      echo 'Source target repo: ${{ inputs.source_target_repo }}'
      echo 'Source target user: ${{ inputs.source_target_user }}'
      echo 'Source database name: ${{ inputs.source_database_name }}'
      echo 'Source database user: ${{ inputs.source_database_user }}'
      echo 'Source repo private key: ${{ inputs.source_repo_private_key }}'
      echo 'Source database password: ${{ inputs.source_database_password }}'
      echo 'Destination target host: ${{ inputs.destination_target_host }}'
      echo 'Destination target repo: ${{ inputs.destination_target_repo }}'
      echo 'Destination target user: ${{ inputs.destination_target_user }}'
      echo 'Destination database name: ${{ inputs.destination_database_name }}'
      echo 'Destination database user: ${{ inputs.destination_database_user }}'
      echo 'Destination repo private key: ${{ inputs.destination_repo_private_key }}'
      echo 'Destination database password: ${{ inputs.destination_database_password }}'
      echo 'File owner: ${{ inputs.file_owner }}'
      echo 'File group: ${{ inputs.file_group }}'
      # return the status
      echo "status=success" >> $GITHUB_OUTPUT
    shell: bash
  - name: Sync
    run: |
      #---------------------------------
      #SSH PREP
      #---------------------------------

      echo "Preparing SSH..."
      
      echo "${{ inputs.source_repo_private_key }}" | tr '*' '\n' > source_repo_private_key
      echo "${{ inputs.destination_repo_private_key }}" | tr '*' '\n' > destination_repo_private_key

      #set permissions on private keys to avoid unprotected private key file error
      chmod 600 source_repo_private_key
      chmod 600 destination_repo_private_key

      #create ssh directory and known_hosts file
      mkdir -p ~/.ssh/ && touch ~/.ssh/known_hosts

      #run ssh-keyscan to add host to known_hosts
      ssh-keyscan -H ${{ inputs.source_target_host }} >> ~/.ssh/known_hosts
      ssh-keyscan -H ${{ inputs.destination_target_host }} >> ~/.ssh/known_hosts

      echo "Preparing SSH agent forwards..."
      eval $(ssh-agent -s)
      ssh-add source_repo_private_key
      ssh-add destination_repo_private_key

      echo "SSH prepared. Preparing to sync databases..."

      #---------------------------------
      #DATABASE SYNC
      #---------------------------------

      echo "Starting database sync..."

      source_url=$(ssh -i source_repo_private_key ${{ inputs.source_target_user }}@${{ inputs.source_target_host }} 'cd ${{ inputs.source_target_repo }} && mysql -u ${{ inputs.source_database_user }} -p'\''${{ inputs.source_database_password }}'\'' ${{ inputs.source_database_name }} -B -N -e "SELECT option_value FROM wp_options WHERE option_name = '\''siteurl'\''"') 

      destination_url=$(ssh -i destination_repo_private_key ${{ inputs.destination_target_user }}@${{ inputs.destination_target_host }} 'cd ${{ inputs.destination_target_repo }} && mysql -u ${{ inputs.destination_database_user }} -p'\''${{ inputs.destination_database_password }}'\'' ${{ inputs.destination_database_name }} -B -N -e "SELECT option_value FROM wp_options WHERE option_name = '\''siteurl'\''"')

      #SSH into source host, navigate to source repo, dump mysql database
      ssh -i source_repo_private_key ${{ inputs.source_target_user }}@${{ inputs.source_target_host }} 'cd ${{ inputs.source_target_repo }} && mysqldump -u ${{ inputs.source_database_user }} -p'\''${{ inputs.source_database_password }}'\'' ${{ inputs.source_database_name }} > ${{ inputs.source_database_name }}.sql'

      #SSH into source host, navigate to source repo, replace source url with destination url in database dump file
      ssh -i source_repo_private_key ${{ inputs.source_target_user }}@${{ inputs.source_target_host }} "cd ${{ inputs.source_target_repo }} && sed -i 's|$source_url|$destination_url|g' ${{ inputs.source_database_name }}.sql"

      scp -o ForwardAgent=yes ${{ inputs.source_target_user }}@${{ inputs.source_target_host }}:${{ inputs.source_target_repo }}/${{ inputs.source_database_name }}.sql ${{ inputs.destination_target_user }}@${{ inputs.destination_target_host }}:${{ inputs.destination_target_repo }}/${{ inputs.source_database_name }}.sql && ssh -i source_repo_private_key ${{ inputs.source_target_user }}@${{ inputs.source_target_host }} "cd ${{ inputs.source_target_repo }} && rm ${{ inputs.source_database_name }}.sql"

      #SSH into destination host, navigate to destination repo and import database dump
      ssh -i destination_repo_private_key ${{ inputs.destination_target_user }}@${{ inputs.destination_target_host }} 'cd ${{ inputs.destination_target_repo }} && mysql -u ${{ inputs.destination_database_user }} -p'\''${{ inputs.destination_database_password }}'\'' ${{ inputs.destination_database_name }} < ${{ inputs.source_database_name }}.sql && rm ${{ inputs.source_database_name }}.sql'
      
      echo "Database imported. Preparing to sync files..."

      #---------------------------------
      #FILE SYNC
      #---------------------------------

      echo "Starting file sync..."

      mkdir site

      #rsync everything from the source target repo to the local directory except wp-config.php
      rsync -avz -e "ssh -i source_repo_private_key" --exclude wp-config.php ${{ inputs.source_target_user }}@${{ inputs.source_target_host }}:${{ inputs.source_target_repo }}/ ./site

      echo "Files synced to local. Preparing to transfer files to destination..."

      #rsync everything from the local directory to the destination target repo
      rsync -avz --chown="${{ inputs.file_owner }}":"${{ inputs.file_group }}" --perms --chmod=D${{ inputs.dir_permissions }},F${{ inputs.file_permissions }} -e "ssh -i destination_repo_private_key" --exclude wp-config.php ./site ${{ inputs.destination_target_user }}@${{ inputs.destination_target_host }}:${{ inputs.destination_target_repo }}/

      echo "File sync complete. Preparing to sync branches..."

      #---------------------------------
      #BRANCH SYNC
      #---------------------------------

      #echo success status to output
      echo "status=success" >> $GITHUB_OUTPUT
    shell: bash


