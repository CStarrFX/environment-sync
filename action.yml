# action.yml
name: 'Environment Sync'
description: 'Sync one environment with another. Copy a production environment into a non-production one, including its git history, files, and database'
inputs:
  source:
    description: 'The environment you want to copy to the non-production one'
    required: true
    default: 'main'
  destination:
    description: 'The environment you want to copy the production one to'
    required: true
    default: 'staging'
  source_repo_private_key:
    description: 'The private key of the source repo'
    required: true
  source_target_host:
    description: 'The host of the source environment'
    required: true
  source_target_repo:
    description: 'The repo of the source environment'
    required: true
  source_target_user:
    description: 'The user of the source environment'
    required: true
  source_database_user:
    description: 'The database user of the source environment'
    required: true
  source_database_password:
    description: 'The database password of the source environment'
    required: true
  source_database_name:
    description: 'The database name of the source environment'
    required: true
  destination_repo_private_key:
    description: 'The private key of the destination repo'
    required: true
  destination_target_host:
    description: 'The host of the destination environment'
    required: true
  destination_target_repo:
    description: 'The repo of the destination environment'
    required: true
  destination_target_user:
    description: 'The user of the destination environment'
    required: true
  destination_database_user:
    description: 'The database user of the destination environment'
    required: true
  destination_database_password:
    description: 'The database password of the destination environment'
    required: true
  destination_database_name:
    description: 'The database name of the destination environment'
    required: true
outputs:
  status: # id of output
    description: 'The status of the environment sync action'
runs:
  using: "composite"
  steps:
  - name: Output inputs
    run: |
      echo 'Syncing ${{ inputs.source }} to ${{ inputs.destination }}'
      echo 'Source target host: ${{ inputs.source_target_host }}'
      echo 'Source target repo: ${{ inputs.source_target_repo }}'
      echo 'Source target user: ${{ inputs.source_target_user }}'
      echo 'Source database name: ${{ inputs.source_database_name }}'
      echo 'Source database user: ${{ inputs.source_database_user }}'
      echo 'Source repo private key: ${{ inputs.source_repo_private_key }}'
      echo 'Source database password: ${{ inputs.source_database_password }}'
      echo 'Destination target host: ${{ inputs.destination_target_host }}'
      echo 'Destination target repo: ${{ inputs.destination_target_repo }}'
      echo 'Destination target user: ${{ inputs.destination_target_user }}'
      echo 'Destination database name: ${{ inputs.destination_database_name }}'
      echo 'Destination database user: ${{ inputs.destination_database_user }}'
      echo 'Destination repo private key: ${{ inputs.destination_repo_private_key }}'
      echo 'Destination database password: ${{ inputs.destination_database_password }}'
      # return the status
      echo "status=success" >> $GITHUB_OUTPUT
    shell: bash
  - name: Sync databases
    run: |
      
      echo "${{ inputs.source_repo_private_key }}" | tr '*' '\n' > source_repo_private_key
      echo "${{ inputs.destination_repo_private_key }}" | tr '*' '\n' > destination_repo_private_key

      #set permissions on private keys to avoid unprotected private key file error
      chmod 600 source_repo_private_key
      chmod 600 destination_repo_private_key

      #create ssh directory and known_hosts file
      mkdir -p ~/.ssh/ && touch ~/.ssh/known_hosts

      #run ssh-keyscan to add host to known_hosts
      ssh-keyscan -H ${{ inputs.source_target_host }} >> ~/.ssh/known_hosts
      ssh-keyscan -H ${{ inputs.destination_target_host }} >> ~/.ssh/known_hosts

      #SSH into source host, navigate to source repo, dump mysql database
      ssh -i source_repo_private_key ${{ inputs.source_target_user }}@${{ inputs.source_target_host }} 'cd ${{ inputs.source_target_repo }} && mysql -u ${{ inputs.source_database_user }} -p'\''${{ inputs.source_database_password }}'\'' ${{ inputs.source_database_name }} -e "SELECT option_value FROM wp_options WHERE option_name = '\''siteurl'\''" > source_domain.txt && mysqldump -u ${{ inputs.source_database_user }} -p'\''${{ inputs.source_database_password }}'\'' ${{ inputs.source_database_name }} > ${{ inputs.source_database_name }}.sql'

      echo "Checking ports"
      netstat -an | grep 9000
      netstat -an | grep 22
      netstat -an | grep 3306
      netstat -an | grep 3307
      netstat -an | grep 8080
      echo "Ports checked"

      #set up ssh tunnel from source to destination
      ssh -i source_repo_private_key -L 9000:${{ inputs.destination_target_host }}:22 ${{ inputs.source_target_user }}@${{ inputs.source_target_host }}

      #transfer database dump from source to destination
      scp -i destination_repo_private_key -P 9000 localhost:${{ inputs.source_target_repo }}/${{ inputs.source_database_name }}.sql ${{ inputs.destination_target_repo }}/${{ inputs.source_database_name }}.sql

      #transfer source domain from source to destination
      scp -i destination_repo_private_key -P 9000 localhost:${{ inputs.source_target_repo }}/source_domain.txt ${{ inputs.destination_target_repo }}/source_domain.txt

      echo "status=success" >> $GITHUB_OUTPUT
    shell: bash
  - name: Sync files
    run: |
      echo "status=success" >> $GITHUB_OUTPUT
    shell: bash

